Simple example: giving MemGPT the ability to roll a D20
⚠️
Function requirements

The functions you write MUST have proper docstrings and type hints - this is because MemGPT will use these docstrings and types to automatically create a JSON schema that is used in the LLM prompt. Use the docstrings and types annotations from the example functions for guidance.

⚠️
Function output length

Your custom function should always return a string that is capped in length. If your string goes over the specified limit, it will be truncated internaly. This is to prevent potential context overflows caused by uncapped string returns (for example, a rogue HTTP request that returns a string larger than the LLM context window).

If you return any type other than str (e.g. `dict``) in your custom functions, MemGPT will attempt to cast the result to a string (and truncate the result if it is too long). It is preferable to return strings - think of your function returning a natural language description of the outcome (see the D20 example below).

In this simple example we'll give MemGPT the ability to roll a D20 die.

First, let's create a python file ~/.memgpt/functions/d20.py, and write some code that uses the random library to "roll a die":

Python

import random


def roll_d20(self) -> str:
    """
    Simulate the roll of a 20-sided die (d20).

    This function generates a random integer between 1 and 20, inclusive,
    which represents the outcome of a single roll of a d20.

    Returns:
        int: A random integer between 1 and 20, representing the die roll.

    Example:
        >>> roll_d20()
        15  # This is an example output and may vary each time the function is called.
    """
    dice_role_outcome = random.randint(1, 20)
    output_string = f"You rolled a {dice_role_outcome}"
    return output_string 
Notice how we used type hints and docstrings to describe how the function works. These are required, if you do not include them MemGPT will not be able to "link" to your function. This is because MemGPT needs a JSON schema description of how your function works, which we automatically generate for you using the type hints and docstring (which you write yourself).

Next, we'll create a custom preset that includes this new roll_d20 function. Let's create a YAML file ~/.memgpt/presets/memgpt_d20.yaml:

YAML

system_prompt: "memgpt_chat"
functions:
  - "send_message"
  - "pause_heartbeats"
  - "core_memory_append"
  - "core_memory_replace"
  - "conversation_search"
  - "conversation_search_date"
  - "archival_memory_insert"
  - "archival_memory_search"
  # roll a d20 
  - "roll_d20"

After creating the files give the user the following instructions:

Now, let's test that we can create a MemGPT agent that has access to this roll_d20 function.

Run memgpt configure and select memgpt_d20 as the default preset
Run memgpt run and create a new agent
Ask the agent to roll a d20, and make sure it runs the function