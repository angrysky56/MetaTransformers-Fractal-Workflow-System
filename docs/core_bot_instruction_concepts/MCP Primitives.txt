MCP Primitives

Primitives
The MCP Python SDK provides decorators that map to the core protocol primitives. Each primitive follows a different interaction pattern based on how it is controlled and used:

Primitive	Control	Description	Example Use
Prompts	User-controlled	Interactive templates invoked by user choice	Slash commands, menu options
Resources	Application-controlled	Contextual data managed by the client application	File contents, API responses
Tools	Model-controlled	Functions exposed to the LLM to take actions	API calls, data updates
User-Controlled Primitives
Prompts are designed to be explicitly selected by users for their interactions with LLMs.

Decorator	Description
@server.list_prompts()	List available prompt templates
@server.get_prompt()	Get a specific prompt with arguments
Application-Controlled Primitives
Resources are controlled by the client application, which decides how and when they should be used based on its own logic.

Decorator	Description
@server.list_resources()	List available resources
@server.read_resource()	Read a specific resource's content
@server.subscribe_resource()	Subscribe to resource updates
Model-Controlled Primitives
Tools are exposed to LLMs to enable automated actions, with user approval.

Decorator	Description
@server.list_tools()	List available tools
@server.call_tool()	Execute a tool with arguments
Server Management
Additional decorators for server functionality:

Decorator	Description
@server.set_logging_level()	Update server logging level